@model IEnumerable<StackFlow.ViewModels.UserReportViewModel>

@{
    ViewData["Title"] = "User Reports";
}

<div class="card shadow-lg border-0 rounded-4 p-4 mt-4 mb-4">
    <div class="d-flex justify-content-between align-items-start mb-3">
        <h2 class="card-title mb-0 fw-bold text-primary display-6">
            <i class="bi bi-file-earmark-person-fill me-2"></i> User Reports
        </h2>
        <a asp-action="Index" asp-controller="Dashboard" class="btn btn-outline-secondary rounded-pill shadow-sm animate-btn">
            <i class="bi bi-arrow-left-circle me-1"></i> Back to Dashboard
        </a>
    </div>
    <hr class="mb-4" />

    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            <i class="bi bi-check-circle-fill me-2"></i>@TempData["SuccessMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }
    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <i class="bi bi-x-circle-fill me-2"></i>@TempData["ErrorMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    @if (!Model.Any())
    {
        <div class="alert alert-info rounded-4 shadow-sm" role="alert">
            <i class="bi bi-info-circle-fill me-2"></i> No users available for reporting.
        </div>
    }
    else
    {
        <div class="table-responsive rounded-4 shadow-sm">
            <table class="table table-hover table-bordered mb-0">
                <thead class="table-primary text-white">
                    <tr>
                        <th scope="col">Username</th>
                        <th scope="col">Email</th>
                        <th scope="col">Role</th>
                        <th scope="col">Total Assigned Tickets</th> @* Reverted text *@
                        <th scope="col">To Do</th>
                        <th scope="col">In Progress</th>
                        <th scope="col">In Review</th>
                        <th scope="col">Completed</th>
                        <th scope="col">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var report in Model)
                    {
                        <tr id="user-row-@report.User.Id">
                            <td>@report.User.Username</td>
                            <td>@report.User.Email</td>
                            <td id="user-role-@report.User.Id">@report.User.Role?.Title</td>
                            <td>@report.TotalTicketsAssigned</td>
                            <td>@report.ToDoTicketsAssigned</td>
                            <td>@report.InProgressTicketsAssigned</td>
                            <td>@report.InReviewTicketsAssigned</td>
                            <td>@report.CompletedTicketsAssigned</td>
                            <td>
                                @* Change Role Button/Dropdown *@
                                @if (report.User.Id != ViewBag.CurrentUserId) @* Prevent changing own role *@
                                {
                                    <div class="d-flex align-items-center">
                                        <form asp-action="UpdateUserRole" asp-controller="Report" method="post" class="d-inline-flex" data-user-id="@report.User.Id">
                                            <input type="hidden" name="userId" value="@report.User.Id" />
                                            <select name="newRoleId" class="form-select form-select-sm rounded-pill" onchange="this.form.submit()">
                                                @foreach (var role in ViewBag.Roles as SelectList)
                                                {
                                                    <option value="@role.Value" selected="@(role.Value == report.User.RoleId.ToString())">@role.Text</option>
                                                }
                                            </select>
                                        </form>
                                        <button type="button" class="btn btn-sm btn-outline-danger rounded-pill ms-2 animate-btn"
                                                data-bs-toggle="modal" data-bs-target="#deleteUserModal_@report.User.Id">
                                            <i class="bi bi-person-x"></i> Delete
                                        </button>
                                    </div>
                                }
                                else
                                {
                                    <span class="text-muted fst-italic">Current User</span>
                                }
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

@* Modals for each user for deletion *@
@foreach (var report in Model)
{
    @if (report.User.Id != ViewBag.CurrentUserId)
    {
        <div class="modal fade" id="deleteUserModal_@report.User.Id" tabindex="-1" aria-labelledby="deleteUserModalLabel_@report.User.Id" aria-hidden="true">
            <div class="modal-dialog modal-sm modal-dialog-centered">
                <div class="modal-content rounded-4">
                    <div class="modal-header bg-danger text-white rounded-top-4">
                        <h5 class="modal-title" id="deleteUserModalLabel_@report.User.Id">Confirm Deletion</h5>
                        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body text-center">
                        <p>Are you sure you want to delete user <strong>@report.User.Username</strong>?</p>
                        <p class="text-danger"><strong>WARNING: All @report.TotalTicketsAssigned assigned tickets will be reassigned!</strong></p> @* Reverted text *@
                    </div>
                    <div class="modal-footer justify-content-center">
                        <button type="button" class="btn btn-secondary rounded-pill animate-btn" data-bs-dismiss="modal">Cancel</button>
                        <form asp-action="DeleteUser" asp-controller="Report" method="post" class="d-inline">
                            <input type="hidden" name="id" value="@report.User.Id" />
                            <button type="submit" class="btn btn-danger rounded-pill animate-btn">
                                Delete
                            </button>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    }
}

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // SignalR User Update Listener
            document.addEventListener('userUpdate', function (event) {
                const { action, userId } = event.detail;
                console.log(`User update event received: ${action} for user ID ${userId}`);

                if (action === 'roleUpdated') {
                    // Refresh the specific row for the user whose role changed
                    const userRow = document.getElementById(`user-row-${userId}`);
                    if (userRow) {
                        // Re-fetch the entire UserReports partial view to ensure all data is up-to-date
                        // and roles are reflected dynamically without hard page reload.
                        // This will also handle the correct display of the dropdowns and buttons.
                        const userReportsContainer = userRow.closest('.table-responsive'); // Find a common container
                        if (userReportsContainer) {
                             fetch('/Report/UserReports') // Fetch the whole partial view for all user reports
                                .then(response => response.text())
                                .then(html => {
                                    // Replace the entire table (or its direct container)
                                    // This assumes UserReports has a table with an ID
                                    const tempDiv = document.createElement('div');
                                    tempDiv.innerHTML = html;
                                    const newTableContent = tempDiv.querySelector('#userReportsTable tbody'); // Assuming UserReports has a table with an ID
                                    if (newTableContent) {
                                        document.querySelector('#userReportsTable tbody').innerHTML = newTableContent.innerHTML;
                                        console.log(`User reports table refreshed for user ID ${userId}.`);
                                    } else {
                                        // Fallback if we can't find the tbody inside the fetched HTML, refresh the whole container
                                        userReportsContainer.innerHTML = html;
                                    }
                                })
                                .catch(error => console.error('Error refreshing user reports:', error));
                        }
                    }
                } else if (action === 'deleted') {
                    // Remove the user row from the table
                    const rowToRemove = document.getElementById(`user-row-${userId}`);
                    if (rowToRemove) {
                        rowToRemove.remove();
                        console.log(`User row removed for user ID ${userId}.`);
                        // Optional: show a message if all users are deleted
                        // This assumes you have logic in the partial to show "No users" message
                    }
                }
            });
        });
    </script>
}
